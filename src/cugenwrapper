#!/usr/bin/python

# Copyright (C) 2017-2018 Kristofer Berggren
# All rights reserved.
#
# cpuusage is distributed under the BSD 3-Clause license, see LICENSE for details.
#

import re
import sys

def genwrapper(infilepath, outfilepath):
    infile = open(infilepath, 'r')
    outfile = open(outfilepath, 'w')
    # Target buffers
    headers = "#define _GNU_SOURCE\n#include <dlfcn.h>\n"
    headers += "#include <stddef.h>\n#include <stdarg.h>\n"
    globs = "static int inited = 0;"
    lin_wrapinit = ""
    lin_wrapdecl = ""
    lin_wrapbody = ""
    osx_wrapdecl = ""
    osx_wrapbody = ""
    for line in infile:
        if line.startswith("//"):
            # skip comments
            continue
        elif line.startswith("#include"):
            # copy include statements
            headers += line
        elif line.endswith(";\n"):
            paropen = line.find("(")
            parclose = line.rfind(")")
            semi = line.find(";")
            if (paropen > -1) and (parclose > -1) and (semi > -1):
                namestart = max(line[0:paropen].rfind(" "), line[0:paropen].rfind("*"))
                rtype = line[0:namestart+1]
                rcall = "return "
                if rtype.strip() == "void":
                    rcall = ""
                name = line[namestart+1:paropen]
                realname = "real_" + name
                callname = realname
                args = line[paropen+1:parclose]
                precall = ""
                postcall = ""
                callargs = ""
                prevargname = ""
                orgargs = args

                # Clean up func pointers
                funptrsfindall = re.findall("\((.*?)\)\((.*?)\)", args)
                funptrscount = len(funptrsfindall)
                for funptrid in range(0, funptrscount):
                    funptrsfind = re.search("\((.*?)\)\((.*?)\)", args)
                    funptrs = re.compile("\((.*?)\)\((.*?)\)")
                    args = re.sub(funptrs, " " + funptrsfind.group(1), args, 1)
                
                for arg in args.split(","):
                    argname = ""
                    if (arg.strip() == "..."):
                        argname = "args";
                        precall = "  va_list args;\n  va_start(args, " + prevargname + ");\n"
                        postcall = "  va_end(args);\n"
                        callname = "v" + name
                    else:
                        argnamestart = max(arg.rfind(" "), arg.rfind("*"))
                        if argnamestart > 0:
                            argname = arg[max(arg.rfind(" "), arg.rfind("*")) + 1:]
                            brackets = re.compile('\[.*?\]')
                            argname = re.sub(brackets, '', argname)
                        
                    if len(callargs) > 0:
                        callargs += ", "

                    if len(argname) > 0:
                        callargs += argname
                        prevargname = argname
                    
                if (name == "malloc") or (name == "free") or (name == "calloc") or (name == "realloc"):
                    lin_wrapdecl += "" + rtype + "__libc_" + name + "(" + args + ");\n"
                    lin_wrapinit += ""
                    lin_wrapbody += line[0:semi] + "\n{\n  " + rcall + "__libc_" + name + "(" + callargs + ");\n}\n\n";
                else:
                    lin_wrapdecl += "static " + rtype + "(*" + realname + ") " + "(" + orgargs + ")" + " = NULL;\n"
                    lin_wrapinit += "  " + realname + " = dlsym(RTLD_NEXT, \"" + name + "\");\n"
                    lin_wrapbody += line[0:semi] + "\n{\n  if (!inited) { wrapper_init(); }\n"
                    lin_wrapbody += precall
                    if rcall != "":
                        lin_wrapbody += "  " + rtype + " rv = " + callname + "(" + callargs + ");\n"
                    else:
                        lin_wrapbody += "  " + callname + "(" + callargs + ");\n"                     
                    lin_wrapbody += postcall
                    if rcall != "":
                        lin_wrapbody += "  return rv;\n"
                    else:
                        lin_wrapbody += "  return;\n"
                    lin_wrapbody += "}\n\n";
                    
                osx_wrapdecl += rtype + "wrap_" + name + "(" + args + ");\n"
                osx_wrapbody += rtype + "wrap_" + name + "(" + args + ")\n{\n"

                osx_wrapbody += precall
                if rcall != "":
                    osx_wrapbody += "  " + rtype + " rv = " + name + "(" + callargs + ");\n"
                else:
                    osx_wrapbody += "  " + name + "(" + callargs + ");\n"                     
                osx_wrapbody += postcall
                if rcall != "":
                    osx_wrapbody += "  return rv;\n"
                else:
                    osx_wrapbody += "  return;\n"

                osx_wrapbody += "} DYLD_INTERPOSE(wrap_" + name + ", " + name + ");\n\n"

    outfile.write(headers + "\n")

    outfile.write(globs + "\n")
    
    outfile.write("#ifdef __APPLE__\n")
    outfile.write("#define DYLD_INTERPOSE(_newfun, _orgfun) \\\n");
    outfile.write("__attribute__((used)) static struct{ const void *newfun; const void *orgfun; } _interpose_##_orgfun \\\n");
    outfile.write("__attribute__ ((section (\"__DATA,__interpose\"))) = { (const void *)(unsigned long)&_newfun, \\\n");
    outfile.write("                                                     (const void *)(unsigned long)&_orgfun }\n\n");
    outfile.write(osx_wrapdecl + "\n")
    outfile.write("void __attribute__ ((constructor)) wrapper_init(void)\n");
    outfile.write("{\n");
    outfile.write("}\n\n");
    outfile.write("void __attribute__ ((destructor)) wrapper_fini(void)\n");
    outfile.write("{\n");
    outfile.write("}\n\n");
    outfile.write(osx_wrapbody)
    outfile.write("#endif\n\n\n")

    outfile.write("#ifdef __linux__\n")
    outfile.write(lin_wrapdecl + "\n")
    outfile.write("void __attribute__ ((constructor)) wrapper_init(void)\n");
    outfile.write("{\n");
    outfile.write(lin_wrapinit)
    outfile.write("  inited = 1;\n")
    outfile.write("}\n\n");
    outfile.write("void __attribute__ ((destructor)) wrapper_fini(void)\n");
    outfile.write("{\n");
    outfile.write("}\n\n");
    outfile.write(lin_wrapbody)
    outfile.write("#endif\n\n")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        genwrapper(sys.argv[1], sys.argv[2])
    else:
        print("usage: cugenwrapper <input h-file> <output c-file>")
        exit

