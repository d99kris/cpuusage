#!/bin/bash

# Copyright (C) 2017-2020 Kristofer Berggren
# All rights reserved.
#
# cpuusage is distributed under the BSD 3-Clause license, see LICENSE for
# details.

# Usage
showusage()
{
  echo "cpuusage is an instrumentation profiler enabling logging of the duration of"
  echo "internal function calls (for programs compiled with -finstrument-functions flag)" 
  echo "or external standard POSIX function calls. It provides visualization in HTML"
  echo "format using Chromium Catapult."
  echo ""
  echo "Usage: cpuusage -a [OPTIONS] PROG [ARGS..]"
  echo "   or: cpuusage -c [OPTIONS] PROG [ARGS..]"
  echo "   or: cpuusage -f <FUNCTIONS> [OPTIONS] PROG [ARGS..]"
  echo "   or: cpuusage -i <INCLUDES> [OPTIONS] PROG [ARGS..]"
  echo "   or: cpuusage -p [OPTIONS] PROG [ARGS..]"
  echo "   or: cpuusage -r JSONFILE [OPTIONS]"
  echo "   or: cpuusage --help|-h"
  echo "   or: cpuusage --version|-v"
  echo ""
  echo "Modes:"
  echo "   -a              trace all standard POSIX function calls"
  echo "   -c              trace internal function calls (requires PROG to"
  echo "                   be compiled with -finstrument-functions)"
  echo "   -f <FUNCTIONS>  trace specified POSIX functions"
  echo "   -i <INCLUDES>   trace functions in specified POSIX headers"
  echo "   -p              trace child process durations"
  echo "   --help, -h      display this help and exit"
  echo "   --version, -v   output version information and exit"
  echo ""
  echo "Options:"
  echo "   -d              debug mode, running program through debugger"
  echo "   -j <PATH>       write iterim JSON trace log to specified path"
  echo "   -m <SAMPLES>    only log up to specified number of samples"
  echo "   -o <PATH>       write HTML report to specified path, rather"
  echo "                   than default ./cutrace-PID.html"
  echo "   -r <JSONFILE>   read JSON file and convert to HTML report"
  echo "   -s              start tracing with SIGUSR1 and stop with"
  echo "                   SIGUSR2, instead of trace from process start"
  echo "   -v              verbose mode"
  echo "   -y              auto-open resulting html file"
  echo "   PROG            program to run and profile"
  echo "   [ARGS]          optional arguments to the program"
  echo ""
  echo "Examples:"
  echo "cpuusage -o cutrace.html -a ./build/cutest1"
  echo "                   trace all standard POSIX function calls in ./build/cutest1"
  echo "                   and write log to cutrace.html"
  echo ""
  echo "cpuusage -o cutrace.html -c ./build/cutest2"
  echo "                   trace instrumented functions in ./build/cutest2 and write"
  echo "                   log to cutrace.html"
  echo ""
  echo "cpuusage -o cutrace.html -f fopen,fclose,fread,fwrite ./build/cutest1"
  echo "                   trace calls to fopen, fclose, fread and fwrite, and write"
  echo "                   log to cutrace.html"
  echo ""
  echo "cpuusage -o cutrace.html -i stdio.h ./build/cutest1"
  echo "                   trace calls to all POSIX functions in stdio.h and write"
  echo "                   log to cutrace.html"
  echo ""
  echo "Report bugs at https://github.com/d99kris/cpuusage"
  echo ""
}

# Version
showversion()
{
  echo "cpuusage v1.40"
  echo ""
  echo "Copyright (C) 2017-2020 Kristofer Berggren"
  echo ""
  echo "cpuusage is distributed under the BSD 3-Clause license."
  echo ""
  echo "Written by Kristofer Berggren"
}

# Arguments - special cases
if [ "${1}" == "--help" ] ; then
  showusage
  exit 0
elif [ "${1}" == "--version" ] ; then
  showversion
  exit 0
elif [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Arguments - regular options
ALL="0"
MANUAL="0"
DEBUG="0"
FUNCS=""
INCS=""
INSTR="0"
OUTPATH=""
OUTJSONPATH=""
PROC=""
READ=""
VERB="false"
OPEN="0"
while getopts "?acdf:i:j:m:o:pr:svy" OPT; do
  case "${OPT}" in
  \?)
    showusage
    exit 1
    ;;
  a)
    ALL="1"
    ;;
  c)
    INSTR="1"
    ;;
  d)
    DEBUG="1"
    ;;
  f)
    FUNCS="${OPTARG}"
    ;;
  i)
    INCS="${OPTARG}"
    ;;
  j)
    OUTJSONPATH="${OPTARG}"
    ;;
  m)
    CU_MAX_SAMPLES="${OPTARG}"
    export CU_MAX_SAMPLES
    ;;
  o)
    OUTPATH="${OPTARG}"
    ;;
  p)
    PROC="1"
    ;;
  r)
    READ="${OPTARG}"
    ;;
  s)
    MANUAL="1"
    ;;
  v)
    VERB="true"
    ;;
  y)
    OPEN="1"
    ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Arguments - ensure program specified, or in read mode
if [[ "${#}" == "0" ]] && [[ "${READ}" == "" ]] ; then
  showusage
  exit 1
fi

# Paths
TMPDIR=$(mktemp -d)
BINDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIBDIR="${BINDIR}/../lib"
CUDIR="${BINDIR}/../share/cpuusage"
WRAPDIR="${CUDIR}/posixwrap"

# Commands
OPENCMD=""
if [[ "${OPEN}" == "1" ]]; then
  if [[ "$(uname)" == "Linux" ]]; then
    OPENCMD="xdg-open"
  elif [[ "$(uname)" == "Darwin" ]]; then
    OPENCMD="open -Wn"
  else
    echo "cpuusage: warning - unknown platform ($(uname)), auto-open disabled."
  fi
fi

# Functions (-f) Mode
if [ "${FUNCS}" != "" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch ${TMPDIR}/allheaders.txt
  touch ${TMPDIR}/prototypes.txt
  IFS=',' read -r -a FUNCSARRAY <<< "${FUNCS}"
  for FUNC in "${FUNCSARRAY[@]}"; do
    HEADERPATH=$(grep -r "${FUNC}(" ${WRAPDIR} | head -1 | cut -d':' -f1)
    FUNCPROT=$(grep -r "${FUNC}(" ${WRAPDIR} | head -1 | cut -d':' -f2)
    if [ "${HEADERPATH}" != "" ] && [ "${FUNCPROT}" != "" ]; then
      HEADERNAME=${HEADERPATH:$((${#WRAPDIR} + 1))}
      echo "${HEADERNAME}" >> ${TMPDIR}/allheaders.txt
      echo "${FUNCPROT}" >> ${TMPDIR}/prototypes.txt
    else
      echo "cpuusage: warning - ${FUNC} not found in standard headers."
    fi
  done
  sort ${TMPDIR}/allheaders.txt | uniq > ${TMPDIR}/headers.txt
  rm ${TMPDIR}/allheaders.txt 2> /dev/null

# Includes (-i) Mode
elif [ "${INCS}" != "" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch ${TMPDIR}/allheaders.txt
  touch ${TMPDIR}/prototypes.txt
  IFS=',' read -r -a INCSARRAY <<< "${INCS}"
  for INC in "${INCSARRAY[@]}"; do
    if [ -f "${WRAPDIR}/${INC}" ]; then
      cat ${WRAPDIR}/${INC} >> ${TMPDIR}/prototypes.txt
      echo "${INC}" >> ${TMPDIR}/allheaders.txt
    else
      echo "cpuusage: warning - ${INC} is not a standard header."
    fi
  done
  sort ${TMPDIR}/allheaders.txt | uniq > ${TMPDIR}/headers.txt
  rm ${TMPDIR}/allheaders.txt 2> /dev/null

# All (-a) Mode
elif [ "${ALL}" == "1" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch ${TMPDIR}/allheaders.txt
  touch ${TMPDIR}/prototypes.txt
  (cd ${WRAPDIR} && find . -type f -name "*.h" | cut -c3- >> ${TMPDIR}/allheaders.txt)
  while read HEADER; do
    cat ${WRAPDIR}/${HEADER} >> ${TMPDIR}/prototypes.txt
  done < ${TMPDIR}/allheaders.txt
  sort ${TMPDIR}/allheaders.txt | uniq > ${TMPDIR}/headers.txt
  rm ${TMPDIR}/allheaders.txt 2> /dev/null

# Instrumented Compile (-c) Mode
elif [ "${INSTR}" == "1" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch "${TMPDIR}/nowrappers.txt"  

# Read (-r) Mode
elif [ "${READ}" != "" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch "${TMPDIR}/read.txt"  

# Proc (-p) Mode
elif [ "${PROC}" != "" ]; then
  ${VERB} && echo "cpuusage: https://github.com/d99kris/cpuusage"
  ${VERB} && echo "cpuusage: initializing"
  touch "${TMPDIR}/proc.txt"  

fi


# Common
if [ -f "${TMPDIR}/headers.txt" ] && [ -f "${TMPDIR}/prototypes.txt" ]; then
  # Generate H-file wrapper.h
  echo "#pragma once" >> ${TMPDIR}/wrapper.h
  while read HEADER; do
    echo "#include <${HEADER}>" >> ${TMPDIR}/wrapper.h
  done < ${TMPDIR}/headers.txt
  rm ${TMPDIR}/headers.txt
  echo "" >> ${TMPDIR}/wrapper.h
  while read PROTOTYPE; do
    echo "${PROTOTYPE}" >> ${TMPDIR}/wrapper.h
  done < ${TMPDIR}/prototypes.txt
  rm ${TMPDIR}/prototypes.txt

  # Generate C-file wrapper.c
  ${BINDIR}/cugenwrapper ${TMPDIR}/wrapper.h ${TMPDIR}/wrapper.c  

  # Copy CMake and cpuusage library source
  cp ${CUDIR}/src/cumain.cpp ${TMPDIR}/cumain.cpp
  cp ${CUDIR}/src/libcpuusage_CMakeLists.txt ${TMPDIR}/CMakeLists.txt

  # Build
  mkdir -p ${TMPDIR}/build
  (cd ${TMPDIR}/build && cmake .. && make -s) > /dev/null

  # Start program with tracing
  ${VERB} && echo "cpuusage: starting program ${1}"
  JSONPATH="${TMPDIR}/cutrace.json"
  if [ "${DEBUG}" == "0" ]; then
    CU_FILE="${JSONPATH}" CU_MANUAL="${MANUAL}" \
      LD_PRELOAD="${TMPDIR}/build/libwrapper.so" \
      DYLD_INSERT_LIBRARIES="${TMPDIR}/build/libwrapper.dylib" \
      DYLD_FORCE_FLAT_NAMESPACE=1 "${@:1}" &
    CHILDPID="${!}"
    wait ${CHILDPID}
  else
    LLDBCMDPATH="${TMPDIR}/lldb.cmd"
    echo "env CU_FILE=\"${JSONPATH}\""                                      >  "${LLDBCMDPATH}"
    echo "env CU_MANUAL=\"${MANUAL}\""                                      >> "${LLDBCMDPATH}"
    echo "env LD_PRELOAD=\"${TMPDIR}/build/libwrapper.so\""                 >> "${LLDBCMDPATH}"
    echo "env DYLD_INSERT_LIBRARIES=\"${TMPDIR}/build/libwrapper.dylib\""   >> "${LLDBCMDPATH}"
    echo "env DYLD_FORCE_FLAT_NAMESPACE=1"                                  >> "${LLDBCMDPATH}"
    echo "run ${@:2}"                                                       >> "${LLDBCMDPATH}"
    lldb "${1}" -s "${LLDBCMDPATH}"
    CHILDPID="dbg"
  fi

  if [ ! -f "${JSONPATH}" ]; then
    echo "cpuusage: error, json log data not created."
    exit 1
  fi
  
  # Save JSON if needed
  if [ "${OUTJSONPATH}" != "" ]; then
    cp ${JSONPATH} ${OUTJSONPATH}
  fi

  # Convert JSON trace to HTML
  ${VERB} && echo "cpuusage: processing output trace"
  if [ "${OUTPATH}" == "" ]; then
    OUTPATH="./cutrace-${CHILDPID}.html"
  fi
  python3 ${CUDIR}/catapult/tracing/bin/trace2html ${JSONPATH} --output="${OUTPATH}" > /dev/null
  RV="${?}"

  SAMPLECNT=$(grep '"cat":"perf"' ${JSONPATH} 2> /dev/null | wc -l)
  ${VERB} && printf "cpuusage: completed processing %d samples\n" ${SAMPLECNT}

  if [[ "${RV}" == "0" ]] && [[ "${OPENCMD}" != "" ]]; then
    ${OPENCMD} "${OUTPATH}" &
  fi
  
elif [ -f "${TMPDIR}/nowrappers.txt" ]; then

  # Start program with tracing
  ${VERB} && echo "cpuusage: starting program ${1}"
  JSONPATH="${TMPDIR}/cutrace.json"
  if [ "${DEBUG}" == "0" ]; then
    CU_FILE="${JSONPATH}" CU_MANUAL="${MANUAL}" \
      LD_PRELOAD="${LIBDIR}/libcpuusage.so" \
      DYLD_INSERT_LIBRARIES="${LIBDIR}/libcpuusage.dylib" \
      DYLD_FORCE_FLAT_NAMESPACE=1 "${@:1}" &
    CHILDPID="${!}"
    wait ${CHILDPID}
  else
    LLDBCMDPATH="${TMPDIR}/lldb.cmd"
    echo "env CU_FILE=\"${JSONPATH}\""                                      >  "${LLDBCMDPATH}"
    echo "env CU_MANUAL=\"${MANUAL}\""                                      >> "${LLDBCMDPATH}"
    echo "env LD_PRELOAD=\"${LIBDIR}/libcpuusage.so\""                      >> "${LLDBCMDPATH}"
    echo "env DYLD_INSERT_LIBRARIES=\"${LIBDIR}/libcpuusage.dylib\""        >> "${LLDBCMDPATH}"
    echo "env DYLD_FORCE_FLAT_NAMESPACE=1"                                  >> "${LLDBCMDPATH}"
    echo "run ${@:2}"                                                       >> "${LLDBCMDPATH}"
    lldb "${1}" -s "${LLDBCMDPATH}"
    CHILDPID="dbg"
  fi

  if [ ! -f "${JSONPATH}" ]; then
    echo "cpuusage: error, json log data not created."
    exit 1
  fi

  # Save JSON if needed
  if [ "${OUTJSONPATH}" != "" ]; then
    cp ${JSONPATH} ${OUTJSONPATH}
  fi

  # Convert JSON trace to HTML
  ${VERB} && echo "cpuusage: processing output trace"
  if [ "${OUTPATH}" == "" ]; then
    OUTPATH="./cutrace-${CHILDPID}.html"
  fi
  python3 ${CUDIR}/catapult/tracing/bin/trace2html ${JSONPATH} --output="${OUTPATH}" > /dev/null
  RV="${?}"

  SAMPLECNT=$(grep '"cat":"perf"' ${JSONPATH} 2> /dev/null | wc -l)
  ${VERB} && printf "cpuusage: completed processing %d samples\n" ${SAMPLECNT}

  if [[ "${RV}" == "0" ]] && [[ "${OPENCMD}" != "" ]]; then
    ${OPENCMD} "${OUTPATH}" &
  fi

elif [ -f "${TMPDIR}/read.txt" ]; then

  # Set up JSON input path
  JSONPATH="${READ}"
  ${VERB} && echo "cpuusage: reading file ${JSONPATH}"

  # Save JSON if needed
  if [ "${OUTJSONPATH}" != "" ]; then
    cp ${JSONPATH} ${OUTJSONPATH}
  fi

  # Convert JSON trace to HTML
  ${VERB} && echo "cpuusage: processing output trace"
  if [ "${OUTPATH}" == "" ]; then
    CHILDPID=$(grep "\"pid\"" ${JSONPATH} | head -1 | sed "s/\"/,/g" | cut -d, -f14)
    OUTPATH="./cutrace-${CHILDPID}.html"
  fi
  python3 ${CUDIR}/catapult/tracing/bin/trace2html ${JSONPATH} --output="${OUTPATH}" > /dev/null
  RV="${?}"

  SAMPLECNT=$(grep '"cat":"perf"' ${JSONPATH} 2> /dev/null | wc -l)
  ${VERB} && printf "cpuusage: completed processing %d samples\n" ${SAMPLECNT}

  if [[ "${RV}" == "0" ]] && [[ "${OPENCMD}" != "" ]]; then
    ${OPENCMD} "${OUTPATH}" &
  fi

elif [ -f "${TMPDIR}/proc.txt" ]; then  # XXX: See if can make common with above nowrappers

  # Start program with tracing
  ${VERB} && echo "cpuusage: starting program ${1}"
  JSONPATH="${TMPDIR}/cutrace.json"
  #if [ "${DEBUG}" == "0" ]; then
    CU_FILE="${JSONPATH}" CU_MANUAL="${MANUAL}" \
      LD_PRELOAD="${LIBDIR}/libcpuusageproc.so" \
      DYLD_INSERT_LIBRARIES="${LIBDIR}/libcpuusageproc.dylib" \
      DYLD_FORCE_FLAT_NAMESPACE=1 "${@:1}" &
    CHILDPID="${!}"
    wait ${CHILDPID}
  #else
  #  LLDBCMDPATH="${TMPDIR}/lldb.cmd"
  #  echo "env CU_FILE=\"${JSONPATH}\""                                      >  "${LLDBCMDPATH}"
  #  echo "env CU_MANUAL=\"${MANUAL}\""                                      >> "${LLDBCMDPATH}"
  #  echo "env LD_PRELOAD=\"${LIBDIR}/libcpuusage.so\""                      >> "${LLDBCMDPATH}"
  #  echo "env DYLD_INSERT_LIBRARIES=\"${LIBDIR}/libcpuusage.dylib\""        >> "${LLDBCMDPATH}"
  #  echo "env DYLD_FORCE_FLAT_NAMESPACE=1"                                  >> "${LLDBCMDPATH}"
  #  echo "run ${@:2}"                                                       >> "${LLDBCMDPATH}"
  #  lldb "${1}" -s "${LLDBCMDPATH}"
  #  CHILDPID="dbg"
  #fi

  if [ ! -f "${JSONPATH}" ]; then
    echo "cpuusage: error, json log data not created."
    exit 1
  fi

  # Save JSON if needed
  if [ "${OUTJSONPATH}" != "" ]; then
    cp ${JSONPATH} ${OUTJSONPATH}
  fi

  # Convert JSON trace to HTML
  ${VERB} && echo "cpuusage: processing output trace"
  if [ "${OUTPATH}" == "" ]; then
    OUTPATH="./cutrace-${CHILDPID}.html"
  fi
  python3 ${CUDIR}/catapult/tracing/bin/trace2html ${JSONPATH} --output="${OUTPATH}" > /dev/null
  RV="${?}"

  SAMPLECNT=$(grep '"cat":"perf"' ${JSONPATH} 2> /dev/null | wc -l)
  ${VERB} && printf "cpuusage: completed processing %d samples\n" ${SAMPLECNT}

  if [[ "${RV}" == "0" ]] && [[ "${OPENCMD}" != "" ]]; then
    ${OPENCMD} "${OUTPATH}" &
  fi

else

  echo "cpuusage: error, no mode specified."
  exit 1

fi

# Cleanup
rm -rf ${TMPDIR}

exit 0

